# node-red ‚öô

{{ template "chart.badgesSection" . }}

[![Artifact Hub](https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/node-red&style=for-the-badge)](https://artifacthub.io/packages/search?repo=node-red)
[![SIT](https://img.shields.io/badge/SIT-awesome-blueviolet.svg?style=for-the-badge)](https://jobs.schwarz)

<img src="https://nodered.org/about/resources/media/node-red-icon-2.png" width="80" height="80">

## Description üìú

{{ template "chart.description" . }}

## Usage (via OCI Registry)

To install the chart using the OCI artifact, run:

```bash
helm install node-red oci://ghcr.io/schwarzit/charts/node-red --version {{ .Version }}
```

## Usage
Adding node-red repository
Before installing any chart provided by this repository, add the node-red Charts Repository:

```bash
helm repo add node-red https://schwarzit.github.io/node-red-chart/
helm repo update
```

### Installing the Chart üì¶
To install the chart with the release name node-red run:

```bash
helm install node-red node-red/node-red --version {{ .Version }}
```

After a few seconds, node-red should be running.

To install the chart in a specific namespace use following commands:

```bash
kubectl create ns node-red
helm install node-red node-red/node-red --namespace node-red
```

> **Tip**: List all releases using `helm list`, a release is a name used to track a specific deployment

### Uninstalling the Chart üóëÔ∏è

To uninstall the `node-red` deployment:

```bash
helm uninstall node-red
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

{{ template "chart.valuesSection" . }}

Specify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example,

```bash
helm install node-red node-red/node-red --set image.tag=latest
```

Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,

```bash
helm install node-red node-red/node-red -f values.yaml
```

> **Tip**: You can use the default [values.yaml](values.yaml)

## Monitoring üå°Ô∏è
To enable the node-red prometheus monitoring capability, you need to install the node `node-red-contrib-prometheus-exporter`.
For more details see [official documentation](https://flows.nodered.org/node/node-red-contrib-prometheus-exporter)

In the helm value you can enable the `ServiceMonitor` via

```yaml
metrics:
  enabled: true
  serviceMonitor:
    enabled: true
```

## Sidecar üèéÔ∏è

This Chart supports the handling for loading flows from configmaps/secrets via the [k8s-sidecar](https://github.com/kiwigrid/k8s-sidecar)

You just need to create a configmap/secret with your `node-red` flow.json and annotate it with the a label and value defined in the chart `sidecar`.
Default values are: `node-red-settings:1`.

The `k8s-sidecar` will then call the `node-red` api to reload the flows. This will be done via a script. To run this script successfully you need to provide the `username` and `password`
of your admin user. The admin user needs to have the right to use the `node-red` API.

The `k8s-sidecar` can also call the `node-red` api to install additional node modules (npm packages) before refreshing or importing the flow.json.
You need to list your flows requiert 'NODE_MODULES' in the `sidecar.extraNodeModules`: e.g.

```yaml
sidecar:
 extraNodeModules:
    - node-red-contrib-xkeys_setunitid
    - node-red-contrib-microsoft-teams-tasks
    - node-red-contrib-json
```
To install the node modules successfully, the node red pod needs access to the `npmrc.registry` to download the declaired modules/packages.

## Contributing ü§ù

### Contributing via GitHub

Feel free to join. Checkout the [contributing guide](CONTRIBUTING.md)

## License ‚öñÔ∏è

Apache License, Version 2.0

{{ template "chart.sourcesSection" . }}

{{ template "chart.maintainersSection" . }}
